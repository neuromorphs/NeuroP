Search.setIndex({"docnames": ["generated/neurop.Backend", "generated/neurop.Backend.SimulatedAnnealingBackend", "generated/neurop.Compiler", "generated/neurop.Compiler.ILPQUBOCompiler", "generated/neurop.Model", "generated/neurop.Model.QUBOModel", "generated/neurop.Model.SNNModel", "generated/neurop.Problem", "generated/neurop.Problem.ILPProblem", "generated/neurop.Problem.TSPProblem", "generated/neurop.base", "generated/neurop.base.BaseBackend", "generated/neurop.base.BaseCompiler", "generated/neurop.base.BaseModel", "generated/neurop.base.BaseProblem", "index"], "filenames": ["generated/neurop.Backend.rst", "generated/neurop.Backend.SimulatedAnnealingBackend.rst", "generated/neurop.Compiler.rst", "generated/neurop.Compiler.ILPQUBOCompiler.rst", "generated/neurop.Model.rst", "generated/neurop.Model.QUBOModel.rst", "generated/neurop.Model.SNNModel.rst", "generated/neurop.Problem.rst", "generated/neurop.Problem.ILPProblem.rst", "generated/neurop.Problem.TSPProblem.rst", "generated/neurop.base.rst", "generated/neurop.base.BaseBackend.rst", "generated/neurop.base.BaseCompiler.rst", "generated/neurop.base.BaseModel.rst", "generated/neurop.base.BaseProblem.rst", "index.rst"], "titles": ["neurop.Backend", "neurop.Backend.SimulatedAnnealingBackend", "neurop.Compiler", "neurop.Compiler.ILPQUBOCompiler", "neurop.Model", "neurop.Model.QUBOModel", "neurop.Model.SNNModel", "neurop.Problem", "neurop.Problem.ILPProblem", "neurop.Problem.TSPProblem", "neurop.base", "neurop.base.BaseBackend", "neurop.base.BaseCompiler", "neurop.base.BaseModel", "neurop.base.BaseProblem", "Welcome"], "terms": {"hardwar": [0, 11, 15], "simul": [0, 1], "emul": 0, "can": [0, 2, 4, 7, 8, 11, 12, 13, 14], "run": [0, 1, 11], "gener": [0, 8], "model": [0, 1, 2, 3, 8, 9, 11, 12, 13], "modul": [0, 2, 4, 7, 15], "class": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "temperatur": 1, "base": [1, 3, 5, 6, 8, 9], "basebackend": [1, 3, 12], "A": 1, "softwar": 1, "anneal": 1, "minim": 1, "qubo": [1, 3, 9, 11, 14, 15], "problem": [1, 2, 3, 12, 13, 14, 15], "__init__": [1, 3, 5, 6, 8, 9, 11, 12, 13, 14], "none": [1, 3, 5, 6, 8, 9, 12, 13, 14], "method": [1, 3, 5, 6, 8, 9, 11, 12, 13, 14], "basemodel": [1, 5, 6, 9, 12], "kwarg": [1, 11], "given": [1, 8, 9, 11, 12, 14], "option": [1, 8, 9, 11, 14], "argument": [1, 11], "us": [2, 7, 8, 15], "optim": [2, 7, 12, 13, 14, 15], "some": 2, "execut": [2, 4, 11], "backend": [2, 3, 4, 6, 9, 12], "ilpproblem": 3, "expans": [3, 12], "function": [3, 8, 9, 14], "expand_integer_to_binary_encod": 3, "penalti": [3, 9], "1": 3, "basecompil": 3, "qubomodel": 3, "convert": [3, 9, 12], "ilp": [3, 8], "form": [3, 9], "model_to_problem_paramet": [3, 12], "param": [3, 8, 9, 12, 14], "dict": [3, 11], "paramet": [3, 8, 9, 12, 14], "problem_to_model_paramet": [3, 12], "evalu": [4, 8, 9, 14], "q": [5, 9], "variabl": [5, 8, 13], "initi": [5, 6, 8, 9, 13, 14], "w": 6, "b": 6, "theta": 6, "alpha": 6, "solv": [7, 14, 15], "librari": [7, 15], "baseproblem": [8, 9, 12], "integ": 8, "linear": 8, "program": 8, "ar": [8, 9], "defin": [8, 14], "set": [8, 9, 14], "equal": 8, "constraint": [8, 9, 14], "an": [8, 14], "object": [8, 9, 11, 12, 13, 14], "over": 8, "The": [8, 9, 15], "formul": [8, 15], "optlang": [8, 9], "packag": 8, "optproblem": [8, 9], "format": 8, "_type_": [8, 9], "default": [8, 9], "which": [8, 9], "mean": [8, 9], "randomli": [8, 9], "attribut": 8, "evaluate_constraint": [8, 9, 14], "ndarrai": [8, 9, 14], "iter": [8, 9, 14], "bool": [8, 9, 14], "binari": [8, 9, 14, 15], "valu": [8, 9, 14], "evaluate_object": [8, 9, 14], "float": [8, 9, 14], "graph": 9, "10": 9, "travel": 9, "salesperson": 9, "tsp": 9, "convert_to_model": 9, "model_typ": 9, "type": [9, 12], "support": 9, "deriv": [9, 11, 13, 14], "special": 9, "requir": 9, "impos": 9, "matrix": 9, "rais": 9, "valueerror": 9, "mai": 9, "return": 9, "cannot": 9, "np": [9, 15], "neuromorph": [11, 15], "from": [11, 13, 15], "tupl": 11, "int": 11, "modeltyp": 12, "compil": 12, "specif": 12, "export": 12, "respect": 12, "variou": [13, 15], "via": 14, "thi": [14, 15], "act": 14, "interfac": 14, "its": 14, "should": 14, "implement": 14, "For": 14, "follow": 14, "to_qubo": 14, "to_is": 14, "parameters_to_qubo": 14, "parameters_from_qubo": 14, "n": 15, "euro": 15, "p": 15, "text": 15, "hard": 15, "quadrat": 15, "unconstrain": 15, "project": 15, "i": 15, "under": 15, "activ": 15, "develop": 15, "aim": 15, "autom": 15, "pipelin": 15, "back": 15, "search": 15, "page": 15}, "objects": {"neurop": [[0, 0, 0, "-", "Backend"], [2, 0, 0, "-", "Compiler"], [4, 0, 0, "-", "Model"], [7, 0, 0, "-", "Problem"], [10, 0, 0, "-", "base"]], "neurop.Backend": [[1, 1, 1, "", "SimulatedAnnealingBackend"]], "neurop.Backend.SimulatedAnnealingBackend": [[1, 2, 1, "", "__init__"], [1, 2, 1, "", "run"]], "neurop.Compiler": [[3, 1, 1, "", "ILPQUBOCompiler"]], "neurop.Compiler.ILPQUBOCompiler": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "compile"], [3, 2, 1, "", "model_to_problem_parameters"], [3, 2, 1, "", "problem_to_model_parameters"]], "neurop.Model": [[5, 1, 1, "", "QUBOModel"], [6, 1, 1, "", "SNNModel"]], "neurop.Model.QUBOModel": [[5, 2, 1, "", "__init__"]], "neurop.Model.SNNModel": [[6, 2, 1, "", "__init__"]], "neurop.Problem": [[8, 1, 1, "", "ILPProblem"], [9, 1, 1, "", "TSPProblem"]], "neurop.Problem.ILPProblem": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "evaluate_constraints"], [8, 2, 1, "", "evaluate_objective"]], "neurop.Problem.TSPProblem": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "convert_to_model"], [9, 2, 1, "", "evaluate_constraints"], [9, 2, 1, "", "evaluate_objective"]], "neurop.base": [[11, 1, 1, "", "BaseBackend"], [12, 1, 1, "", "BaseCompiler"], [13, 1, 1, "", "BaseModel"], [14, 1, 1, "", "BaseProblem"]], "neurop.base.BaseBackend": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "run"]], "neurop.base.BaseCompiler": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "compile"], [12, 2, 1, "", "model_to_problem_parameters"], [12, 2, 1, "", "problem_to_model_parameters"]], "neurop.base.BaseModel": [[13, 2, 1, "", "__init__"]], "neurop.base.BaseProblem": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "evaluate_constraints"], [14, 2, 1, "", "evaluate_objective"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"neurop": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "backend": [0, 1], "simulatedannealingbackend": 1, "compil": [2, 3], "ilpqubocompil": 3, "model": [4, 5, 6], "qubomodel": 5, "snnmodel": 6, "problem": [7, 8, 9], "ilpproblem": 8, "tspproblem": 9, "base": [10, 11, 12, 13, 14], "basebackend": 11, "basecompil": 12, "basemodel": 13, "baseproblem": 14, "index": 15}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"neurop.Backend": [[0, "module-neurop.Backend"]], "neurop.Backend.SimulatedAnnealingBackend": [[1, "neurop-backend-simulatedannealingbackend"]], "neurop.Compiler": [[2, "module-neurop.Compiler"]], "neurop.Compiler.ILPQUBOCompiler": [[3, "neurop-compiler-ilpqubocompiler"]], "neurop.Model": [[4, "module-neurop.Model"]], "neurop.Model.QUBOModel": [[5, "neurop-model-qubomodel"]], "neurop.Model.SNNModel": [[6, "neurop-model-snnmodel"]], "neurop.Problem": [[7, "module-neurop.Problem"]], "neurop.Problem.ILPProblem": [[8, "neurop-problem-ilpproblem"]], "neurop.Problem.TSPProblem": [[9, "neurop-problem-tspproblem"]], "neurop.base": [[10, "module-neurop.base"]], "neurop.base.BaseBackend": [[11, "neurop-base-basebackend"]], "neurop.base.BaseCompiler": [[12, "neurop-base-basecompiler"]], "neurop.base.BaseModel": [[13, "neurop-base-basemodel"]], "neurop.base.BaseProblem": [[14, "neurop-base-baseproblem"]], "NeuroP": [[15, "neurop"]], "Index": [[15, "index"]]}, "indexentries": {"module": [[0, "module-neurop.Backend"], [2, "module-neurop.Compiler"], [4, "module-neurop.Model"], [7, "module-neurop.Problem"], [10, "module-neurop.base"]], "neurop.backend": [[0, "module-neurop.Backend"]], "simulatedannealingbackend (class in neurop.backend)": [[1, "neurop.Backend.SimulatedAnnealingBackend"]], "__init__() (neurop.backend.simulatedannealingbackend method)": [[1, "neurop.Backend.SimulatedAnnealingBackend.__init__"]], "run() (neurop.backend.simulatedannealingbackend method)": [[1, "neurop.Backend.SimulatedAnnealingBackend.run"]], "neurop.compiler": [[2, "module-neurop.Compiler"]], "ilpqubocompiler (class in neurop.compiler)": [[3, "neurop.Compiler.ILPQUBOCompiler"]], "__init__() (neurop.compiler.ilpqubocompiler method)": [[3, "neurop.Compiler.ILPQUBOCompiler.__init__"]], "compile() (neurop.compiler.ilpqubocompiler method)": [[3, "neurop.Compiler.ILPQUBOCompiler.compile"]], "model_to_problem_parameters() (neurop.compiler.ilpqubocompiler method)": [[3, "neurop.Compiler.ILPQUBOCompiler.model_to_problem_parameters"]], "problem_to_model_parameters() (neurop.compiler.ilpqubocompiler method)": [[3, "neurop.Compiler.ILPQUBOCompiler.problem_to_model_parameters"]], "neurop.model": [[4, "module-neurop.Model"]], "qubomodel (class in neurop.model)": [[5, "neurop.Model.QUBOModel"]], "__init__() (neurop.model.qubomodel method)": [[5, "neurop.Model.QUBOModel.__init__"]], "snnmodel (class in neurop.model)": [[6, "neurop.Model.SNNModel"]], "__init__() (neurop.model.snnmodel method)": [[6, "neurop.Model.SNNModel.__init__"]], "neurop.problem": [[7, "module-neurop.Problem"]], "ilpproblem (class in neurop.problem)": [[8, "neurop.Problem.ILPProblem"]], "__init__() (neurop.problem.ilpproblem method)": [[8, "neurop.Problem.ILPProblem.__init__"]], "evaluate_constraints() (neurop.problem.ilpproblem method)": [[8, "neurop.Problem.ILPProblem.evaluate_constraints"]], "evaluate_objective() (neurop.problem.ilpproblem method)": [[8, "neurop.Problem.ILPProblem.evaluate_objective"]], "tspproblem (class in neurop.problem)": [[9, "neurop.Problem.TSPProblem"]], "__init__() (neurop.problem.tspproblem method)": [[9, "neurop.Problem.TSPProblem.__init__"]], "convert_to_model() (neurop.problem.tspproblem method)": [[9, "neurop.Problem.TSPProblem.convert_to_model"]], "evaluate_constraints() (neurop.problem.tspproblem method)": [[9, "neurop.Problem.TSPProblem.evaluate_constraints"]], "evaluate_objective() (neurop.problem.tspproblem method)": [[9, "neurop.Problem.TSPProblem.evaluate_objective"]], "neurop.base": [[10, "module-neurop.base"]], "basebackend (class in neurop.base)": [[11, "neurop.base.BaseBackend"]], "__init__() (neurop.base.basebackend method)": [[11, "neurop.base.BaseBackend.__init__"]], "run() (neurop.base.basebackend method)": [[11, "neurop.base.BaseBackend.run"]], "basecompiler (class in neurop.base)": [[12, "neurop.base.BaseCompiler"]], "__init__() (neurop.base.basecompiler method)": [[12, "neurop.base.BaseCompiler.__init__"]], "compile() (neurop.base.basecompiler method)": [[12, "neurop.base.BaseCompiler.compile"]], "model_to_problem_parameters() (neurop.base.basecompiler method)": [[12, "neurop.base.BaseCompiler.model_to_problem_parameters"]], "problem_to_model_parameters() (neurop.base.basecompiler method)": [[12, "neurop.base.BaseCompiler.problem_to_model_parameters"]], "basemodel (class in neurop.base)": [[13, "neurop.base.BaseModel"]], "__init__() (neurop.base.basemodel method)": [[13, "neurop.base.BaseModel.__init__"]], "baseproblem (class in neurop.base)": [[14, "neurop.base.BaseProblem"]], "__init__() (neurop.base.baseproblem method)": [[14, "neurop.base.BaseProblem.__init__"]], "evaluate_constraints() (neurop.base.baseproblem method)": [[14, "neurop.base.BaseProblem.evaluate_constraints"]], "evaluate_objective() (neurop.base.baseproblem method)": [[14, "neurop.base.BaseProblem.evaluate_objective"]]}})